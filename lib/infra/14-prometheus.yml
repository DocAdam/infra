---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: infra
spec:
  type: ClusterIP
  selector:
    app: prometheus
  ports:
    - name: http
      protocol: TCP
      port: 9090
      targetPort: 9090

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: infra

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: prometheus
  namespace: infra
  annotations:
    kubernetes.io/ingress.class: traefik
    ingress.kubernetes.io/content-type-nosniff: "true"
    ingress.kubernetes.io/force-hsts: "true"
    ingress.kubernetes.io/hsts-max-age: "315360000"
    ingress.kubernetes.io/hsts-include-subdomains: "true"
    ingress.kubernetes.io/ssl-redirect: "true"
    ingress.kubernetes.io/ssl-host: "infra.moov.io"
    ingress.kubernetes.io/ssl-force-host: "true"
spec:
  rules:
    - host: infra.moov.io
      http:
        paths:
          - path: /prometheus/
            backend:
              serviceName: oauth2-proxy
              servicePort: 4180
              # serviceName: prometheus
              # servicePort: 9090
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-data
  namespace: infra
spec:
  accessModes:
    - ReadWriteOnce # mountable only to a single node
  resources:
    requests:
      storage: 50Gi

---
# Docs: https://prometheus.io/docs/prometheus/latest/configuration/configuration/
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: infra
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      scrape_timeout: 10s
      evaluation_interval: 15s
    alerting:
      alertmanagers:
        # We need to prefix since the Ingress has a prefix
        - path_prefix: '/alertmanager/'
          scheme: http
          static_configs:
            - targets:
                - alertmanager.infra.svc.cluster.local:9090
          timeout: 30s
    rule_files:
      - /opt/prometheus-kubernets-monitoring-alerts/prometheus_alerts.yml
      - /opt/prometheus-kubernets-monitoring-rules/prometheus_rules.yml
      - /opt/prometheus-rules/*.yml
    scrape_configs:
      # Scrape kubernetes apiservers
      - job_name: kube-apiserver
        kubernetes_sd_configs:
          - role: endpoints
            # api_server: kubernetes.default.svc.cluster.local
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
      # Scrape Kubernetes controller
      - job_name: 'kube-controller-manager'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: http
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_pod_label_component]
            action: keep
            regex: kube-system;kube-controller-manager
      # Scrape Kubernetes scheduler
      - job_name: 'kube-scheduler'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: http
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_pod_label_component]
            action: keep
            regex: kube-system;kube-scheduler
      # Scrape cAdvisor
      - job_name: 'kubernetes-cadvisor'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
      # Scrape kubelet
      - job_name: kubelet
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - source_labels: [__address__]
            regex: '(.*):10250'
            replacement: '${1}:10255'
            target_label: __address__
      # Scrape pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
            # api_server: kubernetes.default.svc.cluster.local
        # scheme: https
        # tls_config:
        #   ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        # bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
          - action: labeldrop
            regex: '(pod_template_hash)'

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: infra
  labels:
    app: prometheus
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      terminationGracePeriodSeconds: 30
      # TODO(adam): enable this once we run non pre-emptible nodes
      # tolerations:
      #   - key: cloud.google.com/gke-preemptible
      #     operator: Equal
      #     value: "true"
      #     effect: NoSchedule
      containers:
      - image: prom/prometheus:v2.11.1
        imagePullPolicy: Always
        name: prometheus
        args:
          - --config.file=/opt/prometheus/prometheus.yml
          - --storage.tsdb.path=/data/prometheus
          - --storage.tsdb.retention.time=30d
          # - --web.enable-lifecycle # TODO(adam): kubectl port-forward doesn't work to curl -XPOST /-/reload
          - --web.console.libraries=/usr/share/prometheus/console_libraries
          - --web.console.templates=/usr/share/prometheus/consoles
          - --web.external-url=https://infra.moov.io/prometheus/
        volumeMounts:
          - name: prometheus-config
            mountPath: /opt/prometheus/
          - name: prometheus-kubernets-monitoring-alerts
            mountPath: /opt/prometheus-kubernets-monitoring-alerts/
          - name: prometheus-kubernets-monitoring-rules
            mountPath: /opt/prometheus-kubernets-monitoring-rules/
          - name: prometheus-rules
            mountPath: /opt/prometheus-rules/
          - name: prometheus-data
            mountPath: /data/prometheus
        ports:
          - containerPort: 9090
            name: http
            protocol: TCP
        resources:
          limits:
            memory: 1500Mi
          requests:
            memory: 1000Mi
        readinessProbe:
          httpGet:
            path: /prometheus/status
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 30
        livenessProbe:
          httpGet:
            path: /prometheus/status
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 30
        securityContext:
          # TODO(adam): shouldn't need root
          # https://github.com/kubernetes/kubernetes/issues/2630
          runAsUser: 0
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
            items:
              - key: prometheus.yml
                path: prometheus.yml
        - name: prometheus-kubernets-monitoring-alerts
          configMap:
            name: prometheus-kubernets-monitoring-alerts
            items:
              - key: prometheus_alerts.yml
                path: prometheus_alerts.yml
        - name: prometheus-kubernets-monitoring-rules
          configMap:
            name: prometheus-kubernets-monitoring-rules
            items:
              - key: prometheus_rules.yml
                path: prometheus_rules.yml
        - name: prometheus-rules
          configMap:
            name: prometheus-rules
            items:
              - key: prometheus-app-rules.yml
                path: prometheus-app-rules.yml
              - key: prometheus-domain-rules.yml
                path: prometheus-domain-rules.yml
              - key: prometheus-ofac-rules.yml
                path: prometheus-ofac-rules.yml
        - name: prometheus-data
          persistentVolumeClaim:
            claimName: prometheus-data
      restartPolicy: Always

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: infra
---
