---
apiVersion: v1
kind: Service
metadata:
  name: qledger
  namespace: apps
spec:
  type: ClusterIP
  selector:
    app: qledger
  ports:
    - name: http
      protocol: TCP
      port: 7000
      targetPort: 7000

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: qledger
  namespace: apps
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.frontend.rule.type: PathPrefix
    traefik.ingress.kubernetes.io/request-modifier: 'ReplacePathRegex: ^/v1/ledger/(.*) /v1/$1'
    # ingress.kubernetes.io/auth-type: forward
    # ingress.kubernetes.io/auth-url: https://api.moov.io/v1/auth/check
    # ingress.kubernetes.io/auth-response-headers: X-Request-Id,X-User-Id,Access-Control-Allow-Origin,Access-Control-Allow-Methods,Access-Control-Allow-Headers,Access-Control-Allow-Credentials,Content-Type
    ingress.kubernetes.io/content-type-nosniff: "true"
    ingress.kubernetes.io/force-hsts: "true"
    ingress.kubernetes.io/hsts-max-age: "315360000"
    ingress.kubernetes.io/hsts-include-subdomains: "true"
    ingress.kubernetes.io/ssl-redirect: "true"
    ingress.kubernetes.io/ssl-host: "api.moov.io"
    ingress.kubernetes.io/ssl-force-host: "true"
spec:
  rules:
    - host: api.moov.io
      http:
        paths:
          - path: /v1/ledger
            backend:
              serviceName: qledger
              servicePort: 7000

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: qledger-ping
  namespace: apps
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/rewrite-target: /ping
    ingress.kubernetes.io/content-type-nosniff: "true"
    ingress.kubernetes.io/force-hsts: "true"
    ingress.kubernetes.io/hsts-max-age: "315360000"
    ingress.kubernetes.io/hsts-include-subdomains: "true"
    ingress.kubernetes.io/ssl-redirect: "true"
    ingress.kubernetes.io/ssl-host: "api.moov.io"
    ingress.kubernetes.io/ssl-force-host: "true"
spec:
  rules:
    - host: api.moov.io
      http:
        paths:
          - path: /v1/qledger/ping
            backend:
              serviceName: qledger
              servicePort: 7000

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qledger
  namespace: apps
  labels:
    app: qledger
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app: qledger
  template:
    metadata:
      labels:
        app: qledger
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                topologyKey: "kubernetes.io/hostname"
              weight: 1
      containers:
      - image: postgres:11
        name: postgres
        env:
          - name: POSTGRES_USER
            value: qledger
          - name: POSTGRES_PASSWORD
            value: password
          - name: POSTGRES_DB
            value: qledger
        ports:
          - containerPort: 5432
            name: tcp
            protocol: TCP
        readinessProbe:
          tcpSocket:
            port: 7000
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 7000
          initialDelaySeconds: 5
          periodSeconds: 10
      - image: moov/qledger:latest
        imagePullPolicy: Always
        name: qledger
        env:
          - name: LEDGER_AUTH_TOKEN
            value: moov
          - name: MIGRATION_FILES_PATH
            value: file:///go/src/github.com/RealImage/QLedger/migrations/postgres/
          - name: DATABASE_URL
            value: 'postgres://qledger:password@127.0.0.1:5432/qledger?sslmode=disable'
            # value: 'dbname=qledger user=qledger password=password host=localhost port=5432 sslmode=disable'
        ports:
          - containerPort: 7000
            name: http
            protocol: TCP
        resources:
          limits:
            cpu: 0.1
            memory: 100Mi
          requests:
            cpu: 25m
            memory: 25Mi
        readinessProbe:
          httpGet:
            path: /ping
            port: 7000
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /ping
            port: 7000
          initialDelaySeconds: 5
          periodSeconds: 10
      restartPolicy: Always

---
