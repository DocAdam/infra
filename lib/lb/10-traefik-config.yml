# TODO(adam): notes from docs
# - store certs in kv? (Why not k8s Secret?)
#   - https://docs.traefik.io/configuration/acme/#as-a-key-value-store-entry
# - https://docs.traefik.io/configuration/commons/#custom-error-pages
apiVersion: v1
kind: ConfigMap
metadata:
  name: traefik-config
  namespace: lb
data:
  traefik.yaml: |
    global:
      checkNewVersion: true
      sendAnonymousUsage: true
    entryPoints:
      http:
        address: ":80"
      https:
        address: ":443"
        forwardedHeaders:
          trustedIPs:
            - "10.0.0.0/8"
      traefik:
        address: ":8081"
    providers:
      providersThrottleDuration: 2s
      file:
        filename: "/etc/traefik/traefik.yaml"
        watch: true
      # kubernetesIngress:
      #   namespaces: [apps, infra, lb]
    http:
      services:
        docs:
          loadBalancer:
            servers:
              - url: 'http://docs.apps.svc.cluster.local:8080/'
            healthCheck:
              path: "/"
              interval: "30s"
              timeout: "5s"
              scheme: http
        slackin:
          loadBalancer:
            servers:
              - url: 'http://slackin.sales.svc.cluster.local:3000/'
            healthCheck:
              path: "/"
              interval: "30s"
              timeout: "5s"
              scheme: http
        watchman:
          loadBalancer:
            servers:
              - url: 'http://watchman.apps.svc.cluster.local:8080/'
            healthCheck:
              path: "/ping"
              interval: "30s"
              timeout: "5s"
              scheme: http
        achwebui:
          loadBalancer:
            servers:
              - url: 'http://ach-webui.apps.svc.cluster.local:8080/'
            healthCheck:
              path: "/wasm_exec.js"
              interval: "30s"
              timeout: "5s"
              scheme: http
        imagecashletterwebui:
          loadBalancer:
            servers:
              - url: 'http://imagecashletter-webui.apps.svc.cluster.local:8080/'
            healthCheck:
              path: "/wasm_exec.js"
              interval: "30s"
              timeout: "5s"
              scheme: http
        oauth2-proxy:
          loadBalancer:
            servers:
              - url: 'http://oauth2-proxy.infra.svc.cluster.local:4180/'
        soc2:
          loadBalancer:
            servers:
              - url: 'http://soc2.apps.svc.cluster.local:8080/'
            healthCheck:
              path: "/"
              interval: "30s"
              timeout: "5s"
              scheme: http
      middlewares:
        cors:
          headers:
            accessControlAllowCredentials: true
            accessControlAllowMethods: [GET, OPTIONS, PUT, POST, DELETE]
            accessControlAllowOrigin: "*"
            accessControlMaxAge: 600
        remote-addr:
          headers:
            hostsProxyHeaders:
              - X-Forwarded-For
        docs-moov-io-http:
          redirectScheme:
            scheme: https
            permanent: true
        infra-moov-io-http:
          redirectScheme:
            scheme: https
            permanent: true
        slack-moovio-http:
          redirectScheme:
            scheme: https
            permanent: true
        moov-io-http:
          redirectScheme:
            scheme: https
            permanent: true
        demo-moovio-watchman:
          stripPrefix:
            prefixes:
              - "/watchman"
        demo-moovio-achwebui:
          stripPrefix:
            prefixes:
              - "/ach"
        demo-moovio-imagecashletterwebui:
          stripPrefix:
            prefixes:
              - "/x9"
        watchman:
          stripPrefix:
            prefixes:
              - "/v1/watchman"
        soc2:
          stripPrefix:
            prefixes:
              - "/soc2"
            forceslash: true
        soc2-redirect:
          redirectRegex:
            regex: "/soc2$"
            replacement: "/soc2/"
      routers:
        "docs-moov-io-http":
          entryPoints: [http]
          service: docs
          rule: "Host(`docs.moov.io`)"
          middlewares:
            - docs-moov-io-http
        "docs-moov-io":
          entryPoints: [https]
          service: docs
          rule: "Host(`docs.moov.io`)"
          tls:
            certResolver: default
            domains:
              - main: "docs.moov.io"
        "docs-moov-io-soc2":
          entryPoints: [https]
          service: soc2
          rule: "Host(`docs.moov.io`) && PathPrefix(`/soc2`)"
          middlewares:
            - soc2-redirect
            - soc2
          tls:
            certResolver: default
            domains:
              - main: "docs.moov.io"
        "slack-moovio":
          entryPoints: [https]
          service: slackin
          rule: "Host(`slack.moov.io`)"
          tls:
            certResolver: default
            domains:
              - main: "slack.moov.io"
        "slack-moovio-http":
          entryPoints: [http]
          service: slackin
          rule: "Host(`slack.moov.io`)"
          middlewares:
            - slack-moovio-http
        "demo-moovio-watchman":
          entryPoints: [https]
          service: watchman
          rule: "Host(`demo.moov.io`) && PathPrefix(`/watchman`)"
          middlewares:
            - demo-moovio-watchman
          tls:
            certResolver: default
            domains:
              - main: "demo.moov.io"
        "demo-moovio-achwebui":
          entryPoints: [https]
          service: achwebui
          rule: "Host(`demo.moov.io`) && PathPrefix(`/ach`)"
          middlewares:
            - demo-moovio-achwebui
          tls:
            certResolver: default
            domains:
              - main: "demo.moov.io"
        "demo-moovio-imagecashletterwebui":
          entryPoints: [https]
          service: imagecashletterwebui
          rule: "Host(`demo.moov.io`) && PathPrefix(`/x9`)"
          middlewares:
            - demo-moovio-imagecashletterwebui
          tls:
            certResolver: default
            domains:
              - main: "demo.moov.io"
        "infra-oauth2":
          entryPoints: [https]
          service: oauth2-proxy
          rule: "Host(`infra-oss.moov.io`) && PathPrefix(`/oauth2`)"
          tls:
            certResolver: default
            domains:
              - main: "infra-oss.moov.io"
        "infra-moov-io-http":
          entryPoints: [http]
          service: oauth2-proxy
          rule: "Host(`infra-oss.moov.io`)"
          middlewares:
            - infra-moov-io-http
        "infra-idx":
          entryPoints: [https]
          service: oauth2-proxy
          rule: "Host(`infra-oss.moov.io`) && Path(`/`)"
          tls:
            certResolver: default
            domains:
              - main: "infra-oss.moov.io"
        alertmanager:
          entryPoints: [https]
          service: oauth2-proxy
          rule: "Host(`infra-oss.moov.io`) && PathPrefix(`/alertmanager/`)"
          tls:
            certResolver: default
            domains:
              - main: "infra-oss.moov.io"
        traefik:
          entryPoints: [https]
          service: oauth2-proxy
          rule: "Host(`infra-oss.moov.io`) && PathPrefix(`/traefik/`)"
          tls:
            certResolver: default
            domains:
              - main: "infra-oss.moov.io"
        prometheus:
          entryPoints: [https]
          service: oauth2-proxy
          rule: "Host(`infra-oss.moov.io`) && PathPrefix(`/prometheus/`)"
          tls:
            certResolver: default
            domains:
              - main: "infra-oss.moov.io"
        grafana:
          entryPoints: [https]
          service: oauth2-proxy
          rule: "Host(`infra-oss.moov.io`) && PathPrefix(`/grafana/`)"
          tls:
            certResolver: default
            domains:
              - main: "infra-oss.moov.io"
        polaris:
          entryPoints: [https]
          service: oauth2-proxy
          rule: "Host(`infra-oss.moov.io`) && PathPrefix(`/polaris/`)"
          tls:
            certResolver: default
            domains:
              - main: "infra-oss.moov.io"
        stargazers:
          entryPoints: [https]
          service: oauth2-proxy
          rule: "Host(`infra-oss.moov.io`) && PathPrefix(`/stargazers`)"
          tls:
            certResolver: default
            domains:
              - main: "infra-oss.moov.io"
    api:
      insecure: true
      dashboard: true
    metrics:
      prometheus: {}
    ping:
      entryPoint: https
    log:
      level: INFO
    accessLog: {}
    certificatesResolvers:
      default:
        acme:
          email: security@moov.io
          caServer: "https://acme-v02.api.letsencrypt.org/directory"
          storage: /opt/traefik/letsencrypt.json
          keyType: EC384
          httpChallenge:
            entryPoint: http
  nginx.conf: |
    daemon off;
    worker_processes  1;
    error_log  /var/log/nginx/error.log warn;
    # error_log /dev/stdout warn;
    pid       /var/run/nginx.pid;
    events {
      worker_connections  1024;
    }
    http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;
      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
      '$status $body_bytes_sent "$http_referer" '
      '"$http_user_agent" "$http_x_forwarded_for"';

      access_log  /var/log/nginx/access.log  main;
      # access_log /dev/stdout main;
      sendfile        on;
      #tcp_nopush     on;
      keepalive_timeout 65;
      gzip  on;
      include /opt/nginx/conf.d/*.conf;
    }
  default.conf: |
    server {
      listen 8080;
      root /usr/share/nginx/www;
      index index.html index.htm;
      stub_status;
      location /traefik/ {
        rewrite    /traefik/(.*) /$1 break;
        proxy_pass http://localhost:8081/;
      }
    }
  # metrics is for prometheus metrics scraping
  # (avoid error logs)
  metrics: |
    # no content
  index.html: |
    nginx - traefik
---
